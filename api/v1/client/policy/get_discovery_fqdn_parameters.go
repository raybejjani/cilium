// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDiscoveryFqdnParams creates a new GetDiscoveryFqdnParams object
// with the default values initialized.
func NewGetDiscoveryFqdnParams() *GetDiscoveryFqdnParams {
	var ()
	return &GetDiscoveryFqdnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDiscoveryFqdnParamsWithTimeout creates a new GetDiscoveryFqdnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDiscoveryFqdnParamsWithTimeout(timeout time.Duration) *GetDiscoveryFqdnParams {
	var ()
	return &GetDiscoveryFqdnParams{

		timeout: timeout,
	}
}

// NewGetDiscoveryFqdnParamsWithContext creates a new GetDiscoveryFqdnParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDiscoveryFqdnParamsWithContext(ctx context.Context) *GetDiscoveryFqdnParams {
	var ()
	return &GetDiscoveryFqdnParams{

		Context: ctx,
	}
}

// NewGetDiscoveryFqdnParamsWithHTTPClient creates a new GetDiscoveryFqdnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDiscoveryFqdnParamsWithHTTPClient(client *http.Client) *GetDiscoveryFqdnParams {
	var ()
	return &GetDiscoveryFqdnParams{
		HTTPClient: client,
	}
}

/*GetDiscoveryFqdnParams contains all the parameters to send to the API endpoint
for the get discovery fqdn operation typically these are written to a http.Request
*/
type GetDiscoveryFqdnParams struct {

	/*Cidr
	  A CIDR range of IPs

	*/
	Cidr *string
	/*Matchname
	  A toFQDNs compatible matchName expression

	*/
	Matchname *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) WithTimeout(timeout time.Duration) *GetDiscoveryFqdnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) WithContext(ctx context.Context) *GetDiscoveryFqdnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) WithHTTPClient(client *http.Client) *GetDiscoveryFqdnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCidr adds the cidr to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) WithCidr(cidr *string) *GetDiscoveryFqdnParams {
	o.SetCidr(cidr)
	return o
}

// SetCidr adds the cidr to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) SetCidr(cidr *string) {
	o.Cidr = cidr
}

// WithMatchname adds the matchname to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) WithMatchname(matchname *string) *GetDiscoveryFqdnParams {
	o.SetMatchname(matchname)
	return o
}

// SetMatchname adds the matchname to the get discovery fqdn params
func (o *GetDiscoveryFqdnParams) SetMatchname(matchname *string) {
	o.Matchname = matchname
}

// WriteToRequest writes these params to a swagger request
func (o *GetDiscoveryFqdnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cidr != nil {

		// query param cidr
		var qrCidr string
		if o.Cidr != nil {
			qrCidr = *o.Cidr
		}
		qCidr := qrCidr
		if qCidr != "" {
			if err := r.SetQueryParam("cidr", qCidr); err != nil {
				return err
			}
		}

	}

	if o.Matchname != nil {

		// query param matchname
		var qrMatchname string
		if o.Matchname != nil {
			qrMatchname = *o.Matchname
		}
		qMatchname := qrMatchname
		if qMatchname != "" {
			if err := r.SetQueryParam("matchname", qMatchname); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
