// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDiscoveryFqdnHandlerFunc turns a function with the right signature into a get discovery fqdn handler
type GetDiscoveryFqdnHandlerFunc func(GetDiscoveryFqdnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDiscoveryFqdnHandlerFunc) Handle(params GetDiscoveryFqdnParams) middleware.Responder {
	return fn(params)
}

// GetDiscoveryFqdnHandler interface for that can handle valid get discovery fqdn params
type GetDiscoveryFqdnHandler interface {
	Handle(GetDiscoveryFqdnParams) middleware.Responder
}

// NewGetDiscoveryFqdn creates a new http.Handler for the get discovery fqdn operation
func NewGetDiscoveryFqdn(ctx *middleware.Context, handler GetDiscoveryFqdnHandler) *GetDiscoveryFqdn {
	return &GetDiscoveryFqdn{Context: ctx, Handler: handler}
}

/*GetDiscoveryFqdn swagger:route GET /discovery/fqdn policy getDiscoveryFqdn

Retrieves a list of IP -> DNS Name mappings discovered via ToFQDNs rules

Retrieves a list of IP -> DNS Name mappings matching the provided parameters, or all mappings if no parameters are provided.


*/
type GetDiscoveryFqdn struct {
	Context *middleware.Context
	Handler GetDiscoveryFqdnHandler
}

func (o *GetDiscoveryFqdn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDiscoveryFqdnParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
